services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"   
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 10

  backend:
    build:
      context: .
      target: production
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DEBUG: ${DEBUG}
      LOG_LEVEL: ${LOG_LEVEL}
      APP_NAME: ${APP_NAME}
      APP_VERSION: ${APP_VERSION}
    depends_on:
      migrator:
        condition: service_completed_successfully
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/ping || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  nginx:
    image: nginx:1.27
    depends_on:
      backend:
        condition: service_started
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "5"

  migrator:
    build:
      context: .
      target: production
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      APP_NAME: ${APP_NAME}
      APP_VERSION: ${APP_VERSION}
    command: alembic upgrade head
    restart: "no"

volumes:
  postgres_data:
